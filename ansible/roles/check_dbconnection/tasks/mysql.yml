---
- name: Ensure replication user exists on master. (master)
  mysql_user: >
    login_user: "{{ master_db.db_user }}"
    login_password: "{{ master_db.db_password }}"
    name: "{{ replication_user.name }}"
    host: "{{ replication_user.host | default('%') }}"
    password: "{{ replication_user.password }}"
    priv: "{{ replication_user.priv | default('*.*:REPLICATION SLAVE,REPLICATION CLIENT') }}"
    state: present
#  when: >
#    (mysql_replication_role == 'master')
#    and mysql_replication_user
#    and (mysql_replication_master != '')
  register: slave_on_master

- name: Show slave_on_master output
  debug:
    msg={{slave_on_master}}

- name: Creating user slave on master (master)
  become: yes
  mysql_user: >
        name={{ replication_user.name }}
        password={{ replication_user.name }}
        priv= "{{ replication_user.priv | default('*.*:REPLICATION SLAVE,REPLICATION CLIENT') }}"
        host='%'
        state=present
  when: slave_on_master. == 0

- name: check if DB exists
  shell: mysql -e 'SHOW DATABASES;' | grep {{ database }}
  register: dbstatus
  failed_when: dbstatus.rc == 2

- debug: msg={{ hostvars[groups['db_master'][0]]['ansible_all_ipv4_addresses'][:2] }}

#- name: Checking connection to db from backup-master with slave user
#  mysql_db:
#    login_user={{ replication_user.name }}
#    login_password={{ replication_user.password }}
#    login_host={{ hostvars[groups['db_master'][0]]['ansible_all_ipv4_addresses'][:2] }}
#    state=present
#  when: dbstatus.rc == 0
#  delegate_to: {{hostvars[groups['db_backup_master'][0]]['ansible_all_ipv4_addresses'][:2]}}
#      login_port=22
#      name=B_database # Робити роль для однієї бази чи всіх?
...
